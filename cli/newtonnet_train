#! /usr/bin/env python

import os
import argparse
import yaml

import torch

from newtonnet.models import NewtonNet
from newtonnet.train import Trainer
from newtonnet.data import parse_train_test
from newtonnet.layers.activations import get_activation_by_string
from newtonnet.layers.cutoff import get_cutoff_by_string
from newtonnet.train.loss import get_loss_by_string
from newtonnet.train.optimizer import get_optimizer_by_string, get_scheduler_by_string

# argument parser description
parser = argparse.ArgumentParser(
    description=
    'This is a pacakge to train NewtonNet on a given data.'
)
parser.add_argument(
    '-c',
    '--config',
    type=str,
    required=True,
    help='The path to the Yaml configuration file.')

# define arguments
args = parser.parse_args()
config = args.config

# locate files
settings_path = os.path.abspath(config)
settings = yaml.safe_load(open(settings_path, 'r'))
script_path = os.path.abspath(__file__)
output_base_path = settings['general']['output']

# device
if type(settings['general']['device']) is list:
    device = [torch.device(item) for item in settings['general']['device']]
else:
    device = [torch.device(settings['general']['device'])]

# data
torch.manual_seed(settings['data'].get('random_states', 42))
train_gen, val_gen, test_gen, embedded_atomic_numbers, normalizers, shell = parse_train_test(
    train_path=settings['data'].get('train_path', None),
    val_path=settings['data'].get('val_path', None),
    test_path=settings['data'].get('test_path', None),
    properties=settings['data'].get('properties', ['energy', 'forces']),
    cutoff=settings['data'].get('cutoff', 5.0),
    train_size=settings['data'].get('train_size', -1),
    val_size=settings['data'].get('val_size', -1),
    test_size=settings['data'].get('test_size', -1),
    train_batch_size=settings['training'].get('train_batch_size', 32),
    val_batch_size=settings['training'].get('val_batch_size', 32),
    test_batch_size=settings['training'].get('test_batch_size', 32),
    pbc=settings['data'].get('pbc', False),
    cell=settings['data'].get('cell', torch.zeros(3, 3, dtype=torch.float)),
    device=device[0],
    )

# model
if settings['model']['pre_trained']:
    model_path = settings['model']['pre_trained']
    model = torch.load(model_path, map_location=device[0])
else:
    activation = get_activation_by_string(settings['model'].get('activation', 'swish'))
    cutoff_network = get_cutoff_by_string(settings['model'].get('cutoff_network', 'poly'), shell.cutoff)

    model = NewtonNet(
        n_basis=settings['model']['resolution'],
        n_features=settings['model']['n_features'],
        activation=activation,
        n_interactions=settings['model']['n_interactions'],
        dropout=settings['training']['dropout'],
        embedded_atomic_numbers=embedded_atomic_numbers,
        shell=shell,
        cutoff_network=cutoff_network,
        normalizers=normalizers,
        train_normalizer=settings['model']['train_normalizer'],
        device=device[0],
        share_layers=settings['model']['shared_interactions'],
        double_update_node=settings['model']['double_update_node'],
        layer_norm=settings['model']['layer_norm'],
        predictions=settings['model']['predictions'],
        )

# optimizer
trainable_params = filter(lambda p: p.requires_grad, model.parameters())
optimizer = get_optimizer_by_string(
    settings['training'].get('optimizer', 'adam'),
    trainable_params,
    **settings['training'].get('optimizer_kwargs', {}),
    )
lr_scheduler = get_scheduler_by_string(
    settings['training'].get('lr_scheduler', 'plateau'),
    optimizer,
    **settings['training'].get('lr_scheduler_kwargs', {}),
    )

# loss
main_loss, eval_loss = get_loss_by_string(
    **settings['training'].get('loss_kwargs', {}),
    )

# training
trainer = Trainer(
    model=model,
    loss_fns=(main_loss, eval_loss),
    optimizer=optimizer,
    device=device,
    output_base_path=output_base_path,
    script_path=script_path,
    settings_path=settings_path,
    resume_training=settings['training']['resume_training'],
    lr_scheduler=lr_scheduler,
    checkpoint_log=settings['checkpoint']['log'],
    checkpoint_val=settings['checkpoint']['val'],
    checkpoint_test=settings['checkpoint']['test'],
    checkpoint_model=settings['checkpoint']['model'],
    verbose=settings['checkpoint']['verbose'],
    )

# trainer.print_layers()

# tr_steps=1; val_steps=0; irc_steps=0; test_steps=0

trainer.train(
    train_generator=train_gen,
    val_generator=val_gen,
    test_generator=test_gen,
    epochs=settings['training']['epochs'],
    clip_grad=settings['training']['clip_grad'],
    )

print('done!')
